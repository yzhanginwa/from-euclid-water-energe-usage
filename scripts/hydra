#!/usr/bin/env bash

function load_scripts() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  source ./docker/operations.sh

  source ./hydra-operations/install.sh
  source ./hydra-operations/build.sh
  source ./hydra-operations/start.sh
  source ./hydra-operations/stop.sh
  source ./hydra-operations/destroy.sh
  source ./hydra-operations/status.sh
  source ./hydra-operations/remote-deploy.sh
  source ./hydra-operations/remote-start.sh

  source ./cluster/join-cluster.sh

  source ./template/custom-template.sh

  source ./utils/echo-colors.sh
  source ./utils/get-information.sh
  source ./utils/validations.sh

  cd ../
  export ROOT_PATH=$(pwd)

  get_env_variables_from_json_config_file

  cd scripts/
  export SCRIPTS_PATH=$(pwd)
  cd ../infra
  export INFRA_PATH=$(pwd)
  cd ../source
  export SOURCE_PATH=$(pwd)
}

# @cmd Installs a local framework and detaches project
function install() {
  load_scripts
  install_project
}

# @cmd Build containers
# @flag   --no_cache                      Build docker containers with no cache
# @flag   --run                           Run containers after build
# @flag   --rebuild_tessellation          Rebuild the tessellation project
function build() {
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  build_containers
}

# @cmd Start containers from the genesis snapshot (erasing history)
# @alias start_genesis
function start-genesis() {
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  export FORCE_ROLLBACK=false
  start_containers false
}

# @cmd Start containers from the last snapshot (maintaining history)
# @alias start_rollback
function start-rollback() {
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  export FORCE_ROLLBACK=true
  start_containers true
}

# @cmd Stop containers
function stop() {
  load_scripts

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""
  set_docker_compose
  check_if_docker_is_running

  stop_containers
}

# @cmd Destroy containers
# @flag   --delete_project            Delete custom project
function destroy() {
  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  load_scripts

  set_docker_compose
  check_if_docker_is_running

  destroy_containers
}

# @cmd Destroy containers and images
# @flag   --delete_project            Delete custom project
function purge() {
  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  load_scripts

  set_docker_compose
  check_if_docker_is_running

  destroy_containers
}

# @cmd Check the status of the containers
# @flag  --show_all    Show all containers, including the stopped
function status() {
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  status_containers
}

# @cmd Remotely deploy to cloud instances using Ansible
# @alias remote_deploy
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_DEPLOY_PLAYBOOK_FILE: infra/ansible/playbooks/deploy.ansible.yml
function remote-deploy() {
  load_scripts
  
  remote_deploy_metagraph
}

# @cmd Remotely start the metagraph on cloud instances using Ansible
# @alias remote_start
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_START_PLAYBOOK_FILE: infra/ansible/playbooks/start/start.ansible.yml
# @flag   --force_genesis                      Force metagraph to run as genesis
function remote-start() {
  load_scripts
  
  remote_start_metagraph
}

eval "$(argc --argc-eval "$0" "$@")"
