#!/usr/bin/env bash

function build_paths() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  cd ../
  export ROOT_PATH=$(pwd)
  cd scripts/
  export SCRIPTS_PATH=$(pwd)
  cd ../infra
  export INFRA_PATH=$(pwd)
  cd ../source
  export SOURCE_PATH=$(pwd)
  cd ..
}

function load_scripts() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  source ./docker/operations.sh

  source ./hydra-operations/install.sh
  source ./hydra-operations/build.sh
  source ./hydra-operations/start.sh
  source ./hydra-operations/stop.sh
  source ./hydra-operations/destroy.sh
  source ./hydra-operations/purge.sh
  source ./hydra-operations/status.sh
  source ./hydra-operations/remote-deploy.sh
  source ./hydra-operations/remote-start.sh

  source ./cluster/join-cluster.sh

  source ./template/custom-template.sh

  source ./utils/echo-colors.sh
  source ./utils/get-information.sh
  source ./utils/validations.sh

  cd ../
  get_env_variables_from_json_config_file
}

# @cmd Installs a local framework and detaches project
function install() {
  check_if_should_run_update

  build_paths
  load_scripts

  install_project
}

# @cmd Build containers
# @flag   --no_cache                      Build docker containers with no cache
# @flag   --run                           Run containers after build
# @flag   --rebuild_tessellation          Rebuild the tessellation project
function build() {
  check_if_should_run_update

  build_paths
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  build_containers
}

# @cmd Start containers from the genesis snapshot (erasing history)
# @alias start_genesis
function start-genesis() {
  check_if_should_run_update

  build_paths
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  export FORCE_ROLLBACK=false
  start_containers false
}

# @cmd Start containers from the last snapshot (maintaining history)
# @alias start_rollback
function start-rollback() {
  check_if_should_run_update

  build_paths
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  export FORCE_ROLLBACK=true
  start_containers true
}

# @cmd Stop containers
function stop() {
  check_if_should_run_update

  build_paths
  load_scripts

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""
  set_docker_compose
  check_if_docker_is_running

  stop_containers
}

# @cmd Destroy containers
# @flag   --delete_project            Delete custom project
function destroy() {
  check_if_should_run_update

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  build_paths
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  destroy_containers
}

# @cmd Destroy containers and images
# @flag   --delete_project            Delete custom project
function purge() {
  check_if_should_run_update

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  build_paths
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  purge_containers
}

# @cmd Check the status of the containers
# @flag  --show_all    Show all containers, including the stopped
function status() {
  check_if_should_run_update

  build_paths
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  status_containers
}

# @cmd Remotely deploy to cloud instances using Ansible
# @alias remote_deploy
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_DEPLOY_PLAYBOOK_FILE: infra/ansible/playbooks/deploy.ansible.yml
function remote-deploy() {
  check_if_should_run_update

  build_paths
  load_scripts

  remote_deploy_metagraph
}

# @cmd Remotely start the metagraph on cloud instances using Ansible
# @alias remote_start
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_START_PLAYBOOK_FILE: infra/ansible/playbooks/start/start.ansible.yml
# @flag   --force_genesis                      Force metagraph to run as genesis
function remote-start() {
  check_if_should_run_update
  
  build_paths
  load_scripts

  remote_start_metagraph
}

# @cmd Update Euclid
# @option --version  The Euclid version (https://github.com/Constellation-Labs/euclid-development-environment/releases)
function update() {
  build_paths
  update_euclid
}

# The functions below are made for backward compatibility, they will be moved to scripts/hydra-operations/update in the next releases
function check_if_should_run_update() {
  build_paths
  DIRECTORY="$SCRIPTS_PATH/hydra-operations"

  if [ ! -d "$DIRECTORY" ]; then
    echo "$(tput setaf 1)Updates have been migrated to `hydra update` . Please run hydra update before continuing"
    exit 1
  fi
}

function check_if_container_is_running() {
  if docker ps --format '{{.Names}}' | grep "$1"; then
    echo You should stop the container $1 before update
    exit 1
  fi
}

function checkout_version() {
  if [ ! -z "$(git ls-remote origin $1)" ]; then
    git pull &>/dev/null
    git checkout $1 &>/dev/null
    echo "Valid version"
  else
    echo "Invalid version"
    exit 1
  fi
}

function check_if_should_update() {
  echo "This operation will update the following files/directories:"
  echo "Directory - infra/docker"
  echo "Directory - scripts"
  echo "File - infra/ansible/hosts.ansible.yml"
  echo "File - infra/ansible/playbooks/deploy/configure.ansible.yml"
  echo "File - infra/ansible/playbooks/deploy/deploy.ansible.yml"
  echo "File - infra/ansible/playbooks/start/clean.ansible.yml"
  echo "File - infra/ansible/playbooks/start/start.ansible.yml"
  echo "File - infra/ansible/playbooks/start/currency-l1/cluster.ansible.yml"
  echo "File - infra/ansible/playbooks/start/currency-l1/initial_validator.ansible.yml"
  echo "File - infra/ansible/playbooks/start/currency-l1/validator.ansible.yml"
  echo "File - infra/ansible/playbooks/start/data-l1/cluster.ansible.yml"
  echo "File - infra/ansible/playbooks/start/data-l1/initial_validator.ansible.yml"
  echo "File - infra/ansible/playbooks/start/data-l1/validator.ansible.yml"
  echo "File - infra/ansible/playbooks/start/metagraph-l0/cluster.ansible.yml"
  echo "File - infra/ansible/playbooks/start/metagraph-l0/genesis.ansible.yml"
  echo "File - infra/ansible/playbooks/start/metagraph-l0/validator.ansible.yml"

  default="N"
  echo "Do you want to proceed? (Y/N, default: $default): "
  read -r input

  if [ -z "$input" ]; then
    input="$default"
  fi

  input=$(echo "$input" | tr '[:lower:]' '[:upper:]')

  if [[ "$input" == "N" ]]; then
    exit 0
  fi

  if [[ "$input" != "N" && "$input" != "Y" ]]; then
    echo "Invalid input. Please enter 'Y' or 'N'."
    exit 0
  fi
}

function check_if_any_container_is_running() {
  echo "You should stop all containers before update"

  echo "Checking if any container is running ..."
  check_if_container_is_running global-l0-1

  check_if_container_is_running dag-l1-1
  check_if_container_is_running dag-l1-2
  check_if_container_is_running dag-l1-3

  check_if_container_is_running metagraph-l0-1
  check_if_container_is_running metagraph-l0-2
  check_if_container_is_running metagraph-l0-3

  check_if_container_is_running currency-l1-1
  check_if_container_is_running currency-l1-2
  check_if_container_is_running currency-l1-3

  check_if_container_is_running data-l1-1
  check_if_container_is_running data-l1-2
  check_if_container_is_running data-l1-3

  check_if_container_is_running grafana
  check_if_container_is_running prometheus
}

function update_infra_docker() {
  cd $INFRA_PATH
  echo "Updating docker folder ..."
  chmod +x docker
  rm -r docker

  cp -r euclid-development-environment/infra/docker .
  echo "Updated"
}

function update_scripts() {
  echo "Updating scripts ..."
  cd $ROOT_PATH
  chmod +x scripts
  rm -r scripts

  cp -r infra/euclid-development-environment/scripts .
  echo "Updated"
}

function update_ansible_files() {
  cd $INFRA_PATH
  echo "Updating ansible files..."

  ANSIBLE_DIRECTORY="$INFRA_PATH/ansible"

  if [ -d "$DIRECTORY" ]; then
    chmod +x ansible/hosts.ansible.yml
    rm -r ansible/hosts.ansible.yml
    cp euclid-development-environment/infra/ansible/hosts.ansible.yml .

    chmod +x ansible/playbooks/deploy/configure.ansible.yml
    rm -r ansible/playbooks/deploy/configure.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/deploy/configure.ansible.yml .

    chmod +x ansible/playbooks/deploy/deploy.ansible.yml
    rm -r ansible/playbooks/deploy/deploy.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/deploy/deploy.ansible.yml .

    chmod +x ansible/playbooks/start/clean.ansible.yml
    rm -r ansible/playbooks/start/clean.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/clean.ansible.yml .

    chmod +x ansible/playbooks/start/start.ansible.yml
    rm -r ansible/playbooks/start/start.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/start.ansible.yml .

    chmod +x ansible/playbooks/start/currency-l1/cluster.ansible.yml
    rm -r ansible/playbooks/start/currency-l1/cluster.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/currency-l1/cluster.ansible.yml .

    chmod +x ansible/playbooks/start/currency-l1/initial_validator.ansible.yml
    rm -r ansible/playbooks/start/currency-l1/initial_validator.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/currency-l1/initial_validator.ansible.yml .

    chmod +x ansible/playbooks/start/currency-l1/validator.ansible.yml
    rm -r ansible/playbooks/start/currency-l1/validator.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/currency-l1/validator.ansible.yml .

    chmod +x ansible/playbooks/start/data-l1/cluster.ansible.yml
    rm -r ansible/playbooks/start/data-l1/cluster.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/data-l1/cluster.ansible.yml .

    chmod +x ansible/playbooks/start/data-l1/initial_validator.ansible.yml
    rm -r ansible/playbooks/start/data-l1/initial_validator.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/data-l1/initial_validator.ansible.yml .

    chmod +x ansible/playbooks/start/data-l1/validator.ansible.yml
    rm -r ansible/playbooks/start/data-l1/validator.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/data-l1/validator.ansible.yml .

    chmod +x ansible/playbooks/start/metagraph-l0/cluster.ansible.yml
    rm -r ansible/playbooks/start/metagraph-l0/cluster.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/metagraph-l0/cluster.ansible.yml .

    chmod +x ansible/playbooks/start/metagraph-l0/genesis.ansible.yml
    rm -r ansible/playbooks/start/metagraph-l0/genesis.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/metagraph-l0/genesis.ansible.yml .

    chmod +x ansible/playbooks/start/metagraph-l0/validator.ansible.yml
    rm -r ansible/playbooks/start/metagraph-l0/validator.ansible.yml
    cp euclid-development-environment/infra/ansible/playbooks/start/metagraph-l0/validator.ansible.yml .

  else
    chmod +x ansible
    rm -r ansible

    cp -r euclid-development-environment/infra/ansible .
  fi

  echo "Updated"
}

function update_euclid() {
  check_if_should_update
  check_if_any_container_is_running

  cd $INFRA_PATH

  echo "Starting update ..."
  echo "Getting updated version"
  git clone --quiet https://github.com/Constellation-Labs/euclid-development-environment.git >/dev/null
  cd euclid-development-environment/
  checkout_version $argc_version

  update_infra_docker
  update_scripts
  update_ansible_files

  chmod -R +w $INFRA_PATH/euclid-development-environment
  rm -r $INFRA_PATH/euclid-development-environment
  echo "Updating process finished!"
}

eval "$(argc --argc-eval "$0" "$@")"
